{"version":3,"sources":["Spotlights.js"],"names":["logger","Logger","Spotlights","EventEmitter","constructor","maxSpotlights","signalingSocket","super","this","_signalingSocket","_maxSpotlights","_peerList","_unmutablePeerList","_selectedSpotlights","_currentSpotlights","_started","start","_handleSignaling","_spotlightsUpdated","addPeers","peers","peer","_newPeer","id","peerInSpotlights","peerId","indexOf","getNextAsSelected","newSelectedPeer","length","index","i","includes","getPrevAsSelected","setPeerSpotlight","debug","on","notification","method","data","_closePeer","clearSpotlights","push","filter","addSpeakerList","speakerList","Set","handleActiveSpeaker","splice","concat","spotlights","_arraysEqual","slice","emit","arr1","arr2","oldMaxSpotlights"],"mappings":"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","file":"static/js/spotlights.a18a13e3.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\nimport Logger from './Logger';\n\nconst logger = new Logger('Spotlight');\n\nexport default class Spotlights extends EventEmitter\n{\n\tconstructor(maxSpotlights, signalingSocket)\n\t{\n\t\tsuper();\n\n\t\tthis._signalingSocket = signalingSocket;\n\t\tthis._maxSpotlights = maxSpotlights;\n\t\tthis._peerList = [];\n\t\tthis._unmutablePeerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._currentSpotlights = [];\n\t\tthis._started = false;\n\t}\n\n\tstart()\n\t{\n\t\tthis._handleSignaling();\n\n\t\tthis._started = true;\n\t\tthis._spotlightsUpdated();\n\t}\n\n\taddPeers(peers)\n\t{\n\t\tfor (const peer of peers)\n\t\t{\n\t\t\tthis._newPeer(peer.id);\n\t\t}\n\t}\n\n\tpeerInSpotlights(peerId)\n\t{\n\t\tif (this._started)\n\t\t{\n\t\t\treturn this._currentSpotlights.indexOf(peerId) !== -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tgetNextAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex++;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index >= this._unmutablePeerList.length)\n\t\t\t\t{\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tgetPrevAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex--;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tindex = this._unmutablePeerList.length - 1;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tsetPeerSpotlight(peerId)\n\t{\n\t\tlogger.debug('setPeerSpotlight() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._selectedSpotlights.indexOf(peerId);\n\n\t\tif (index !== -1)\n\t\t{\n\t\t\tthis._selectedSpotlights = [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._selectedSpotlights = [ peerId ];\n\t\t}\n\n\t\t/*\n\t\tif (index === -1) // We don't have this peer in the list, adding\n\t\t{\n\t\t\tthis._selectedSpotlights.push(peerId);\n\t\t}\n\t\telse // We have this peer, remove\n\t\t{\n\t\t\tthis._selectedSpotlights.splice(index, 1);\n\t\t}\n\t\t*/\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\t_handleSignaling()\n\t{\n\t\tthis._signalingSocket.on('notification', (notification) =>\n\t\t{\n\t\t\tif (notification.method === 'newPeer')\n\t\t\t{\n\t\t\t\tconst { id } = notification.data;\n\n\t\t\t\tthis._newPeer(id);\n\t\t\t}\n\n\t\t\tif (notification.method === 'peerClosed')\n\t\t\t{\n\t\t\t\tconst { peerId } = notification.data;\n\n\t\t\t\tthis._closePeer(peerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tclearSpotlights()\n\t{\n\t\tthis._started = false;\n\n\t\tthis._peerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._currentSpotlights = [];\n\t}\n\n\t_newPeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"newpeer\" event [id: \"%s\"]', id);\n\n\t\tif (this._peerList.indexOf(id) === -1) // We don't have this peer in the list\n\t\t{\n\t\t\tlogger.debug('_handlePeer() | adding peer [peerId: \"%s\"]', id);\n\n\t\t\tthis._peerList.push(id);\n\t\t\tthis._unmutablePeerList.push(id);\n\n\t\t\tif (this._started)\n\t\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\n\t_closePeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"peerClosed\" event [peerId:%o]', id);\n\n\t\tthis._peerList = this._peerList.filter((peer) => peer !== id);\n\t\tthis._unmutablePeerList = this._unmutablePeerList.filter((peer) => peer !== id);\n\n\t\tthis._selectedSpotlights = this._selectedSpotlights.filter((peer) => peer !== id);\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\taddSpeakerList(speakerList)\n\t{\n\t\tthis._peerList = [ ...new Set([ ...speakerList, ...this._peerList ]) ];\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\thandleActiveSpeaker(peerId)\n\t{\n\t\tlogger.debug('handleActiveSpeaker() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._peerList.indexOf(peerId);\n\n\t\tif (index > -1)\n\t\t{\n\t\t\tthis._peerList.splice(index, 1);\n\t\t\tthis._peerList = [ peerId ].concat(this._peerList);\n\n\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\n\t_spotlightsUpdated()\n\t{\n\t\tlet spotlights;\n\n\t\tif (this._selectedSpotlights.length > 0)\n\t\t{\n\t\t\tspotlights = [ ...new Set([ ...this._selectedSpotlights, ...this._peerList ]) ];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspotlights = this._peerList;\n\t\t}\n\n\t\tif (\n\t\t\t!this._arraysEqual(\n\t\t\t\tthis._currentSpotlights, spotlights.slice(0, this._maxSpotlights)\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights updated, emitting');\n\n\t\t\tthis._currentSpotlights = spotlights.slice(0, this._maxSpotlights);\n\t\t\tthis.emit('spotlights-updated', this._currentSpotlights);\n\t\t}\n\t\telse\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights not updated');\n\t}\n\n\t_arraysEqual(arr1, arr2)\n\t{\n\t\tif (arr1.length !== arr2.length)\n\t\t\treturn false;\n\n\t\tfor (let i = arr1.length; i--;)\n\t\t{\n\t\t\tif (arr1[i] !== arr2[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget maxSpotlights()\n\t{\n\t\treturn this._maxSpotlights;\n\t}\n\n\tset maxSpotlights(maxSpotlights)\n\t{\n\t\tconst oldMaxSpotlights = this._maxSpotlights;\n\n\t\tthis._maxSpotlights = maxSpotlights;\n\n\t\tif (oldMaxSpotlights !== this._maxSpotlights)\n\t\t\tthis._spotlightsUpdated();\n\t}\n}\n"],"sourceRoot":""}